import TelegramBot from "node-telegram-bot-api";
import {
  userCheck,
  checkName,
  checkAge,
  checkCategory,
  saveUsers,
  getJSON,
} from "./users/users.js";
import { translate } from "./translator.js";
import {
  explanationText,
  questionText,
  optionsText,
  optsOptions,
  checkAnswer,
} from "./questions/questions.js";
import { setInfo } from "./users/sheetsInfo.js";
import dotenv from "dotenv";

dotenv.config();

const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: true,
});

const ADMIN_ID = parseInt(process.env.ADMIN_ID);

process.on("uncaughtException", async (error, source) => {
  console.log(error, source);
  await bot.sendDocument(ADMIN_ID, "./users/users.json");
});

bot.setMyCommands([
  { command: "/restart", description: await translate("uk", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ") },
  { command: "/info", description: await translate("uk", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") },
  {
    command: "/language",
    description: await translate("uk", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞"),
  },
]);

function start() {
  save();

  bot.on("message", async (msg) => {
    const text = msg.text;
    const curUser = await userCheck(msg.from);

    if (curUser.botIsTexting === true) return;
    if (!text) {
      await bot.sendMessageDelay(
        curUser,
        await translate(curUser.language, "–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é")
      );
      return;
    }

    if (text === "/getJSON" && curUser.telegramId === ADMIN_ID) {
      await getJSON(bot, ADMIN_ID);
      return;
    }
    try {
      if (text === "/start") {
        await startScreen(curUser);
      } else if (text === "/restart") {
        await restartQuiz(curUser);
      } else if (text === "/info") {
        await sendInfo(curUser);
      } else if (text === "/language") {
        await changeLanguage(curUser);
      } else if (curUser.isAgeWriting) {
        await lookAtAge(curUser, text);
      } else if (curUser.isNameWriting) {
        await lookAtName(curUser, text);
      } else if (curUser.isBotNameWriting) {
        await botNameAdd(curUser, text);
      } else if (curUser.isMediatorAnswerWriting) {
        await checkMediatorAnswer(curUser, text);
      } else if (curUser.whatIsForgotten) {
        await checkFirstAnswer(curUser, text);
      } else if (curUser.isLanguageChoosing) {
        await bot.sendMessageDelay(
          curUser,
          await translate(
            curUser.language ? curUser.language : "uk",
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–∑—ã–∫ üôÉ"
          )
        );
      } else if (curUser.isInQuiz) {
        const res = await checkAnswer(
          curUser.questionNumber,
          text,
          curUser.category
        );
        await sendAnswer(curUser, res);
      } else if (curUser.isOutQuiz && curUser.questionNumber === 0) {
        await endMenu(curUser);
      } else if (!curUser.language) {
        await changeLanguage(curUser);
      } else
        await bot.sendMessageDelay(
          curUser,
          await translate(
            curUser.language,
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω–∏–º)"
          )
        );
    } catch (e) {
      console.log(e);
      await getJSON(bot, ADMIN_ID);
    }
  });
  bot.on("polling_error", console.log);
  bot.on("webhook_error", (error) => {
    console.log(error.code);
  });

  bot.on("callback_query", async (msg) => {
    const curUser = await userCheck(msg.from);
    if (curUser.botIsTexting === true) return;
    let callbackText = "";
    bot.answerCallbackQuery(msg.id, {
      text: callbackText,
      show_alert: true,
    });
    try {
      if (curUser.isLanguageChoosing) {
        if (msg.data === "uk" || msg.data === "ru") {
          await languageIsChanged(curUser, msg.data);
        }
      } else if (curUser.isNameWriting) {
        if (msg.data === "yes") {
          await nameApprove(curUser);
        } else if (msg.data === "change") {
          await addName(curUser, true);
        }
      } else if (curUser.firstQuestionAsking) {
        if (msg.data === "yeah") {
          await botName(curUser, true);
        } else if (msg.data === "no") {
          await botName(curUser, false);
        } else if (msg.data === "yeah1") {
          await mediatorsKnow(curUser, true);
        } else if (msg.data === "no1") {
          await mediatorsKnow(curUser, false);
        } else if (msg.data === "yeah2") {
          await startQuizAnswer(curUser, true);
        } else if (msg.data === "no2") {
          await startQuizAnswer(curUser, false);
        }
      } else if (
        !curUser.isInQuiz &&
        msg.data === `ok${curUser.questionNumber}`
      ) {
        await askQuestion(curUser);
      } else if (
        !curUser.isInQuiz &&
        msg.data === `want${curUser.questionNumber}`
      ) {
        await showExplanation(curUser);
      }
    } catch (e) {
      console.log(e);
      await getJSON(bot, ADMIN_ID);
    }
  });
}

async function startScreen(curUser) {
  if (!curUser.language) {
    const opts = {
      reply_markup: JSON.stringify({
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: "–ü—Ä–∏–≤—ñ—Ç!",
              callback_data: "hello",
            },
          ],
        ],
      }),
    };
    await bot.sendMessageDelay(curUser, "–ü—Ä–∏–≤—ñ—Ç!", opts);
  } else
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ /restart")
    );
}

async function changeLanguage(curUser) {
  curUser.isLanguageChoosing = true;
  await bot.sendMessageDelay(
    curUser,
    await translate("uk", "–Ø —Ö–æ—á—É —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"),
    { reply_markup: JSON.stringify({ hide_keyboard: true }) }
  );
  const opts = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: curUser.language === "ru" ? "–†—É—Å—Å–∫–∏–π" : "–†–æ—Åi–π—Å—å–∫–∞",
            callback_data: "ru",
          },
          {
            text: curUser.language === "ru" ? "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π" : "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            callback_data: "uk",
          },
        ],
      ],
    }),
  };
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language ? curUser.language : "uk",
      "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è"
    ),
    opts
  );
}

async function languageIsChanged(curUser, languageThatIsChosen) {
  await bot.setMyCommands([
    {
      command: "/restart",
      description: await translate(languageThatIsChosen, "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
    },
    {
      command: "/info",
      description: await translate(languageThatIsChosen, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    },
    {
      command: "/language",
      description: await translate(languageThatIsChosen, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞"),
    },
  ]);

  curUser.isLanguageChoosing = false;

  if (!curUser.language) {
    curUser.language = languageThatIsChosen;

    await addName(curUser);
  } else {
    await bot.sendMessageDelay(
      curUser,
      languageThatIsChosen === "ru"
        ? "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
        : "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É."
    );
  }
  curUser.language = languageThatIsChosen;
}

async function addName(curUser, rewrite = false) {
  curUser.isNameWriting = true;
  if (rewrite) {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–•–æ—Ä–æ—à–æ, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
      )
    );
  }
}

async function sendInfo(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–ü—Ä–∞–≤–∏–ª–∞ –∫–≤–µ—Å—Ç—É –ø—Ä–æ—Å—Ç—ñ:", "uk")
  );
  await bot.sendMessageDelay(
    curUser,
    (await translate(
      curUser.language,
      "–ú–∏ –∑ —Ç–æ–±–æ—é –º–∞—î–º–æ –∑–≥–∞–¥–∞—Ç–∏ –º–æ—î —ñ–º‚Äô—è.",
      "uk"
    )) +
      " " +
      (await translate(
        curUser.language,
        "–Ø —Å—Ç–∞–≤–ª—é –ø–∏—Ç–∞–Ω–Ω—è, - —Ç–∏ –Ω–∞ –Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å —Ç–∏–º, —â–æ —è —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ–≤.",
        "uk"
      )) +
      " " +
      (await translate(
        curUser.language,
        "–ù–∞ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —î –¥–µ–∫—ñ–ª—å–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.",
        "uk"
      )) +
      " " +
      (await translate(
        curUser.language,
        "–ë—É–¥—å —É–≤–∞–∂–Ω–∏–º, –Ω–µ –≤—Å—ñ –∑ –Ω–∏—Ö –≤—ñ—Ä–Ω—ñ.",
        "uk"
      )) +
      " " +
      (await translate(
        curUser.language,
        "–ê–ª–µ –∂ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è —á–æ–º—É –≤–æ–Ω–∞ –Ω–µ –≤—ñ—Ä–Ω–∞ —ñ –≤ —Ç–µ–±–µ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å–ø—Ä–æ–±–∏.",
        "uk"
      )) +
      " " +
      (await translate(
        curUser.language,
        "–ß–∏–º –±—ñ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏, —Ç–∏–º –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤.",
        "uk"
      )) +
      " " +
      (await translate(
        curUser.language,
        "–¢–∏ –Ω–µ –æ–±–º–µ–∂–µ–Ω–∏–π –≤ —á–∞—Å—ñ —ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–±.",
        "uk"
      ))
  );
}

async function lookAtName(curUser, text) {
  let res = await checkName(text);
  if (res === "long") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º üôÇ"
      )
    );
  } else {
    const opts = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: await translate(curUser.language, "–î–∞"),
              callback_data: "yes",
            },
          ],
          [
            {
              text: await translate(curUser.language, "–ò–∑–º–µ–Ω–∏—Ç—å"),
              callback_data: "change",
            },
          ],
        ],
      }),
    };
    curUser.name = res;
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, `–¢–µ–±—è –∑–æ–≤—É—Ç ${res}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?`),
      opts
    );
  }
}

async function nameApprove(curUser) {
  curUser.isNameWriting = false;
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      `–°—É–ø–µ—Ä, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ${curUser.name}`
    )
  );
  await askForAge(curUser);
}

async function askForAge(curUser) {
  curUser.isAgeWriting = true;
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, `–ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?üôÉ`)
  );
}

async function lookAtAge(curUser, text) {
  let res = await checkAge(text);
  if (!res) {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏üôÇ"
      )
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, `–°–ø–∞—Å–∏–±–æ!`)
    );
    curUser.age = res;
    curUser.isAgeWriting = false;
    await checkCategory(curUser);
    await firstQuestion(curUser);
    //await startQuiz(curUser);
  }
}

async function firstQuestion(curUser) {
  curUser.firstQuestionAsking = true;
  curUser.whatIsForgotten = true;
  bot.sendMessageDelay(
    curUser,
    (await translate(
      curUser.language,
      "–û–π, –º–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —è —â–æ—Å—å –∑–∞–±—É–≤) N–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ç–≤–æ—é —É–≤–∞–∂–Ω—ñ—Å—Ç—å, –≤–æ–Ω–∞ –Ω–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:NN1.",
      "uk"
    )) +
      " " +
      (await translate(curUser.language, "–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è N2.")) +
      " " +
      (await translate(curUser.language, "–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å –Ω–∞ –∂–∏—Ç—Ç—èN3.", "uk")) +
      " " +
      (await translate(curUser.language, "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è)")),
    {
      reply_markup: JSON.stringify({
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: "1",
            },
            { text: "2" },
            { text: "3" },
          ],
        ],
      }),
    }
  );
}

async function checkFirstAnswer(curUser, text) {
  if (text === "1") {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ó–¥–∞—î—Ç—å—Å—è –ø—Ä–∏–≤—ñ—Ç–∞–≤—Å—èüôÑ", "uk")
    );
  } else if (text === "2") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ê —Ç–∏ –∑ –≥—É–º–æ—Ä–æ–º) –º–µ–Ω—ñ —Ü–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è!",
        "uk"
      )
    );
  } else if (text === "3") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–¢–∞–∫, —Ç–∏ –ø—Ä–∞–≤–∏–π, —è–∫ —è –º—ñ–≥ –ø—Ä–æ —Ü–µ –∑–∞–±—É—Ç–∏ü§î",
        "uk"
      ),
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );

    curUser.whatIsForgotten = false;
    await nameStory(curUser);
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–£–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
    );
  }
}

async function nameStory(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏‚Ä¶ —É–ø—Å‚Ä¶ —è , –∑–¥–∞—î—Ç—å—Å—è, –Ω–µ –ø–∞–º‚Äô—è—Ç–∞—é‚Ä¶",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–°—É–º–Ω–æ‚Ä¶ —â–æ—Å—å —Ç—Ä–∞–ø–∏–ª–æ—Å—å, —Ü–µ –º–∞–±—É—Ç—å –ø–æ–≤‚Äô—è–∑–∞–Ω–æ –∑ —Ç–∏–º, —â–æ –º–µ–Ω–µ –±—É–ª–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –∑ —á—É–¥–æ–≤–æ—ó –∫—Ä–∞—ó–Ω–∏ –¥–æ —Ç–µ–±–µ —ñ –ø–æ –¥–æ—Ä–æ–∑—ñ –º–µ–Ω—ñ –∑–∞–±—É–ª–∏ –∑–∞–ø–∏—Å–∞—Ç–∏ —ñ–º‚Äô—è))",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–Ø –¥—É–∂–µ —Ö–æ—á—É –∑ —Ç–æ–±–æ—é –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, –∞–ª–µ —è–∫ –∂–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏, —è –Ω–µ –ø–∞–º‚Äô—è—Ç–∞—é —è–∫ –º–µ–Ω–µ –∑–≤–∞—Ç–∏üòî",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–ù—É —â–æ –∂‚Ä¶ –ü–æ—á–Ω–µ–º–æ –∫–≤–µ—Å—Ç!", "uk")
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–í –º–µ–Ω–µ –¥–æ —Ç–µ–±–µ —î –ø–µ—Ä—à–∞ —Å–ø—Ä–∞–≤–∞)", "uk")
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–î–æ–ø–æ–º–æ–∂–∏ –º–µ–Ω—ñ –∑–≥–∞–¥–∞—Ç–∏ –º–æ—î —ñ–º‚Äô—èü•∫", "uk")
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–Ø —Ä–æ–∑–ø–æ–≤—ñ–º —Ç–æ–±—ñ —Ç–µ —â–æ –ø–∞–º‚Äô—è—Ç–∞—é —Ç–∞ –º–æ–∂–µ –º–∏ –∑ —Ç–æ–±–æ—é —Ä–∞–∑–æ–º –∑–≥–∞–¥–∞—î–º–æ –º–æ—î —ñ–º‚Äô—èüòå",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–°–ø–æ–¥—ñ–≤–∞—é—Å—å, —â–æ —Ç–∏ –∑–≥–æ–¥–µ–Ω?üòÖ", "uk"),
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: await translate(curUser.language, "–î–∞"),
              callback_data: "yeah",
            },
            {
              text: await translate(curUser.language, "–ù–µ—Ç"),
              callback_data: "no",
            },
          ],
        ],
      }),
    }
  );
}

async function botName(curUser, agree) {
  if (agree) {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–°—É–ø–µ—Ä, —Ç–æ–¥—ñ –ø–æ—á–Ω–µ–º–æ, –∞–ª–µ –∂ —Å–ø–æ—á–∞—Ç–∫—É, –ø–æ–ø—Ä–æ—à—É —Ç–µ–±–µ –ø—Ä–∏–¥—É–º–∞—Ç–∏ –º–µ–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–µ —ñ–º‚Äô—è, —â–æ–± –Ω–∞–º –±—É–ª–æ –∑—Ä—É—á–Ω–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—åüôÉ",
        "uk"
      ),
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–¢–∞–∫, —Ç–∏ –ø—Ä–∞–≤–∏–π, –º–µ–Ω—ñ —Ç–µ–∂ –∑–¥–∞—î—Ç—å—Å—è —Ü–µ –±—É–¥–µ –Ω–µ –∑—Ä—É—á–Ω–æ, —Ç–æ–∂ –ø–æ–∫–∏ —â–æ –ø–æ–ø—Ä–æ—à—É —Ç–µ–±–µ –ø—Ä–∏–¥—É–º–∞—Ç–∏ –º–µ–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–µ —ñ–º‚Äô—è, —â–æ–± –Ω–∞–º –±—É–ª–æ –∑—Ä—É—á–Ω–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—åüôÉ",
        "uk"
      ),
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
  }
  curUser.isBotNameWriting = true;
}

async function botNameAdd(curUser, text) {
  curUser.botName = text;
  curUser.isBotNameWriting = false;
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –¥–æ –º–µ–Ω–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —Å–∞–º–µ —Ç–∞–∫ ‚ò∫Ô∏è",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–¢–æ —è —Ç–æ–±—ñ –æ–±—ñ—Ü—è–≤ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ —Å–µ–±–µ, —Å–ª—É—Ö–∞–π)",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–Ø, –ø—Ä–∏–±—É–≤ –∑ —á—É–¥–æ–≤–æ—ó –ø–ª–∞–Ω–µ—Ç–∏ ________ ",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ú–µ—à–∫–∞–Ω—Ü—ñ –Ω–∞—à–æ—ó –ø–ª–∞–Ω–µ—Ç–∏ —Ä–æ–∑–º–æ–≤–ª—è—é—Ç—å –æ–¥–∏–Ω –∑ –æ–¥–Ω–∏–º –≥–æ–ª–æ—Å–æ–º , –∞ —á—É—é—Ç—å –≤—É—Ö–∞–º–∏.",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–û–π, —Ç–∏ –∑–∞—Ä–∞–∑ –∑–∞–ø–∏—Ç–∞—î—à, —â–æ —Ü–µ —è —Ç–∞–∫–µ –∫–∞–∂—É‚Ä¶ –Ω–∞—á–µ–±—Ç–æ —É –≤–∞—Å –Ω–µ —Ç–∞–∫)",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–¢–∞–∫ —Ç–æ –≤–æ–Ω–æ —Ç–∞–∫)) –∞–ª–µ –∂ –∫–∞–∑–∞—Ç–∏ —ñ —á—É—Ç–∏ –º–æ–∂–Ω–∞ –ø–æ —Ä—ñ–∑–Ω–æ–º—É",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–°–ª–æ–≤–æ–º –º–æ–∂–Ω–∞ –æ–±—Ä–∞–∑–∏—Ç–∏, –∞ –Ω–∞ –æ–±—Ä–∞–∑—É –≤–∏–Ω–∏–∫–Ω–µ –∑–ª—ñ—Å—Ç—å —ñ —è–∫—â–æ –Ω–µ –ø–æ—á—É—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ —Ç–æ –±—É–¥–µ —Å–≤–∞—Ä–∫–∞ —á–∏ —â–µ –≥—ñ—Ä—à–µ –±—ñ–π–∫–∞ ü´£N–¢–æ–±—ñ –∑–Ω–∞–π–æ–º—ñ —Ç–∞–∫—ñ –ø—Ä–∏–∫–ª–∞–¥–∏?",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ù–∞ –Ω–∞—à—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ –Ω—ñ —Å–≤–∞—Ä–æ–∫ –Ω—ñ –±—ñ–π–æ–∫, —Ç–æ–º—É —â–æ, –≤—Å—ñ—Ö –∑–º–∞–ª–∫—É –Ω–∞–≤—á–∞—é—Ç—å, —â–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ —Ü–µ –Ω–µ –ø–æ–≥–∞–Ω–æ, —ñ–Ω–æ–¥—ñ –Ω–∞–≤—ñ—Ç—å –¥–æ–±—Ä–µ, –∞–ª–µ –∂ –∫–æ–ª–∏  –≤–æ–Ω–∏ –≤–∏–Ω–∏–∫–∞—é—Ç—å —Ç–æ –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ —ó—Ö —Ç—Ä–µ–±–∞ —à–ª—è—Ö–æ–º –ø–µ—Ä–µ–º–æ–≤–∏–Ω.",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–í –Ω–∞—Å —î —Ç–∞–∫—ñ —á–∞—Ä—ñ–≤–Ω–∏–∫–∏, —è–∫—ñ –Ω–∞–∑–∏–≤–∞—é—Ç—å—Å—è ‚Äì –ú–ï–î–Ü–ê–¢–û–†–ò.",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–°–∞–º–µ –≤–æ–Ω–∏ –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å —ñ –≤—É—Ö–∞) —Ç—Ä–æ—à–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ —è —Ç–æ–±—ñ –ø–æ—è—Å–Ω—é, –ø—Ä–æ —â–æ —Ç—É—Ç —è –Ω–∞–≥–æ–≤–æ—Ä–∏–≤üòÑ",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–û–¥–Ω–∏–º –∑ –Ω–∏—Ö —î —è üòÅ", "uk")
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–Ü –æ—Ç –∫–æ–ª–∏ –º–∏ –∑—Ä–æ–∑—É–º—ñ–ª–∏, —â–æ —Ü–µ–π —á–∞—Ä—ñ–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø–æ–∑–±–∞–≤–∏–≤ –Ω–∞—à—É –ø–ª–∞–Ω–µ—Ç—É –Ω–µ–≥–∞—Ç–∏–≤—É, —Å–≤–∞—Ä–æ–∫ —ñ –±—ñ–π–æ–∫ –≤–∂–µ –Ω–∞ —Å—Ç–æ —Ä–æ–∫—ñ–≤, —Ç–∞–∫, –º–∏ —Å–∞–º–µ –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞–ª–∏ —Ü—é –ø–æ–¥—ñ—é, –º–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–∏–º –∑ —ñ–Ω—à–∏–º–∏.",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–°–∞–º–µ –º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –¥–æ —Ç–µ–±–µ –∑ –º—ñ—Å—ñ—î—é ‚Äì –Ω–∞–≤—á–∏—Ç–∏ —Ç–µ–±–µ —Ä–æ–∑—É–º—ñ—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∞—Ö, –≤–º—ñ–ª–æ —Ä–æ–∑–≤‚Äô—è–∑—É–≤–∞—Ç–∏ —ó—Ö —ñ –æ–ø–∞–Ω–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è.",
      "uk"
    )
  );
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–¢–æ–±—ñ —â–æ—Å—å –≤—ñ–¥–æ–º–æ –ø—Ä–æ –ú–µ–¥—ñ–∞—Ç–æ—Ä—ñ–≤?", "uk"),
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: await translate(curUser.language, "–î–∞"),
              callback_data: "yeah1",
            },
            {
              text: await translate(curUser.language, "–ù–µ—Ç"),
              callback_data: "no1",
            },
          ],
        ],
      }),
    }
  );
}

async function mediatorsKnow(curUser, know) {
  if (know) {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–û, —á—É–¥–æ–≤–æ, —Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ –∑ –≥—É–º–æ—Ä–æ–º, –∞ —â–µ –π –æ–±—ñ–∑–Ω–∞–Ω–∏–π!",
        "uk"
      )
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –±–∞–≥–∞—Ç–æ —Ö—Ç–æ –Ω–µ –∑–Ω–∞—î, —è —Ç–æ–±—ñ —Ä–æ–∑–ø–æ–≤—ñ–º üòåNN–î–æ—Ä–µ—á—ñ, –Ω–∞ –Ω–∞—à—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ 100 —Ä–æ–∫—ñ–≤ —Ç–æ–º—É, —Ç–µ–∂ –Ω—ñ—Ö—Ç–æ –ø—Ä–æ –Ω–µ—ó –Ω–µ –∑–Ω–∞–≤, –∞–ª–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—É –¥–æ –Ω–∞—Å –ø—Ä–∏–ª–µ—Ç—ñ–≤ —Å—Ö–æ–∂–∏–π –Ω–∞ –º–µ–Ω–µ —á–∞—Ä—ñ–≤–Ω–∏–∫ —ñ –Ω–∞–≤—á–∏–≤ –Ω–∞—Å",
        "uk"
      )
    );
  }
  await bot.sendMessageDelay(
    curUser,
    (await translate(curUser.language, "–Ø–∫ –¥—É–º–∞—î—à –ú–µ–¥—ñ–∞—Ç–æ—Ä —Ü–µN1.", "uk")) +
      " " +
      (await translate(
        curUser.language,
        "–ü—Ä–∏–ª–∞–¥ –¥–ª—è –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ N2.",
        "uk"
      )) +
      " " +
      (await translate(
        curUser.language,
        "–û—Å–æ–±–∞ ‚Äì —è–∫–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –º–µ–¥—ñ–∞—Ü—ñ—éN3.",
        "uk"
      )) +
      " " +
      (await translate(curUser.language, "–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏", "uk")),
    {
      reply_markup: JSON.stringify({
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: "1",
            },
            {
              text: "2",
            },
            {
              text: "3",
            },
          ],
        ],
      }),
    }
  );

  curUser.isMediatorAnswerWriting = true;
}

async function checkMediatorAnswer(curUser, text) {
  if (text === "1") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–¢–∞–∫, —î —Ç–∞–∫–µ, –ú–µ–¥—ñ–∞—Ç–æ—Ä (–≤—ñ–Ω –∂–µ –ø–ª–µ–∫—Ç—Ä) —è–≤–ª—è—î —Å–æ–±–æ—é –Ω–µ–≤–µ–ª–∏–∫–∏–π –ø–ª–æ—Å–∫–∏–π –≤–∏—Ä—ñ–± –∑ –ø—Ä—É–∂–Ω–æ–≥–æ, –º—ñ—Ü–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É –∑ –∑–∞–≥–æ—Å—Ç—Ä–µ–Ω–∏–º –∫—É—Ç–æ–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ",
        "uk"
      ),
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
    curUser.isMediatorAnswerWriting = false;
    await startQuizQuestion(curUser);
  } else if (text === "2") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–¢–∞–∫, —ñ —Å–∞–º–µ –ø—Ä–æ –Ω—å–æ–≥–æ –º–∏ –±—É–¥–µ–º–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é!",
        "uk"
      ),
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
    curUser.isMediatorAnswerWriting = false;
    await startQuizQuestion(curUser);
  } else if (text === "3") {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–í—ñ—Ä–Ω–æ!", "uk"),
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
    curUser.isMediatorAnswerWriting = false;
    await startQuizQuestion(curUser);
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–£–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
    );
  }
}

async function startQuizQuestion(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —â–æ –º–∏ –º–æ–∂–µ–º–æ –ø–æ—á–∏–Ω–∞—Ç–∏ –∑–∞—Ä–æ–±–ª—è—Ç–∏ —Ç–æ–±—ñ –±–∞–ª–∏, –∑–≥–æ–¥–µ–Ω?",
      "uk"
    ),
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: await translate(curUser.language, "–î–∞"),
              callback_data: "yeah2",
            },
            {
              text: await translate(curUser.language, "–ù–µ—Ç"),
              callback_data: "no2",
            },
          ],
        ],
      }),
    }
  );
}

async function startQuizAnswer(curUser, agree) {
  curUser.firstQuestionAsking = false;
  if (agree) {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–°—É–ø–µ—Ä! –ê–ª–µ, –¥–æ–∑–≤–æ–ª—å —è —Ç–æ–±—ñ —Å–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–ø–æ–≤—ñ–º –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞",
        "uk"
      )
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ó–≥–æ–¥–µ–Ω, —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞, –±–æ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–∂–ª–∏–≤–∞ —Ä—ñ—á",
        "uk"
      )
    );
  }
  await sendInfo(curUser);
  await startQuiz(curUser);
}

async function startQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏!NN(–û—Ç–≤–µ—Ç—ã —Å–µ–π—á–∞—Å 1, 3, 2)"
    )
  );
  await askQuestion(curUser);
}

async function showExplanation(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      await explanationText(curUser.questionNumber, curUser.category)
    ),
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: await translate(curUser.language, "–ü–æ–Ω—è—Ç–Ω–æ"),
              callback_data: `ok${curUser.questionNumber}`,
            },
          ],
        ],
      }),
    }
  );
}

async function askQuestion(curUser) {
  if (curUser.questionNumber > 2) await endQuiz(curUser);
  else {
    curUser.isInQuiz = true;
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        await questionText(curUser.questionNumber, curUser.category)
      )
    );
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        await optionsText(curUser, curUser.category)
      ),
      {
        reply_markup: JSON.stringify({
          keyboard: [
            await optsOptions(curUser.questionNumber, curUser.category),
          ],
          resize_keyboard: true,
        }),
      }
    );
  }
}

async function sendAnswer(curUser, res) {
  if (res === "problem") {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–£–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
    );
  } else if (res === "incorrect") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ N*–í–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É*"
      )
    );
    if (!curUser.isOutQuiz) {
      if (curUser.curPoints[curUser.curPoints.length - 1] > 0)
        curUser.curPoints[curUser.curPoints.length - 1]--;
    }
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ú–æ–ª–æ–¥–µ—Ü!"),
      {
        reply_markup: JSON.stringify({
          hide_keyboard: true,
        }),
      }
    );
    curUser.questionNumber++;
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É*"),
      {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              {
                text: await translate(
                  curUser.language,
                  "–ü–æ—á–µ–º—É –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã?"
                ),
                callback_data: `want${curUser.questionNumber}`,
              },
            ],
            [
              {
                text: await translate(curUser.language, "–ü–æ–Ω—è—Ç–Ω–æ"),
                callback_data: `ok${curUser.questionNumber}`,
              },
            ],
          ],
        }),
      }
    );
    curUser.isInQuiz = false;
  }
}

async function endQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫–≤–∏–∑–∞!NN*–ü—Ä–æ—â–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç*"
    ),
    {
      reply_markup: JSON.stringify({
        hide_keyboard: true,
      }),
    }
  );
  if (!curUser.isOutQuiz) {
    curUser.points = curUser.curPoints.reduce((a, b) => +a + +b);
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${curUser.points}`)
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        `–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ)`
      )
    );
  }
  curUser.questionNumber = 0;
  curUser.isInQuiz = false;
  curUser.isOutQuiz = true;
}

async function save() {
  setTimeout(async () => {
    await save();
    await saveUsers();
    setTimeout(async () => await setInfo(), 1000 * 60 * 2);
  }, 1000 * 60 * 3);
}

async function endMenu(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞!")
  );
}

async function timeout(curUser, ms) {
  return new Promise((resolve) =>
    setTimeout(() => {
      curUser.botIsTexting = false;
      resolve();
    }, ms)
  );
}

TelegramBot.prototype.sendMessageDelay = async function (curUser, text, opts) {
  curUser.botIsTexting = true;
  await this.sendChatAction(curUser.telegramId, "typing");
  await timeout(curUser, text.length * 50);
  await this.sendMessage(curUser.telegramId, text, opts);
};

async function restartQuiz(curUser) {
  if (!curUser.points)
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–≤–∏–∑, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑"
      )
    );
  else {
    curUser.questionNumber = 0;
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ö–≤–∏–∑ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ"),
      {
        reply_markup: JSON.stringify({
          hide_keyboard: true,
        }),
      }
    );
    await askQuestion(curUser);
  }
}

start();
