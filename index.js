import TelegramBot from "node-telegram-bot-api";
import {
  userCheck,
  checkName,
  checkAge,
  checkCategory,
  saveUsers,
  getJSON,
} from "./users/users.js";
import { translate } from "./translator.js";
import {
  questionText,
  optionsText,
  optsOptions,
  checkAnswer,
} from "./questions/questions.js";
import { setInfo } from "./users/sheetsInfo.js";

const BOT_TOKEN = "5996542018:AAGOw8-n2RQiMTzDAXWK73k_daWB9skG0e8";

const bot = new TelegramBot(process.env.BOT_TOKEN || BOT_TOKEN, {
  polling: true,
});

const ADMIN_ID = 512962834;

bot.setMyCommands([
  { command: "/restart", description: await translate("uk", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ") },
  { command: "/info", description: await translate("uk", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") },
  {
    command: "/language",
    description: await translate("uk", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞"),
  },
]);

function start() {
  save();

  bot.on("message", async (msg) => {
    const text = msg.text;
    const curUser = await userCheck(msg.from);

    if (curUser.botIsTexting === true) return;
    if (!text) {
      await bot.sendMessageDelay(
        curUser,
        await translate(curUser.language, "–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é")
      );
      return;
    }

    if (text === "/getJSON" && curUser.telegramId === ADMIN_ID) {
      await getJSON(bot, ADMIN_ID);
      return;
    }
    try {
      if (text === "/start") {
        await startScreen(curUser);
      } else if (text === "/restart") {
        await restartQuiz(curUser);
      } else if (text === "/info") {
        await sendInfo(curUser);
      } else if (text === "/language") {
        await changeLanguage(curUser);
      } else if (curUser.isAgeWriting) {
        await lookAtAge(curUser, text);
      } else if (curUser.isNameWriting) {
        await lookAtName(curUser, text);
      } else if (curUser.isLanguageChoosing) {
        await bot.sendMessageDelay(
          curUser,
          await translate(
            curUser.language ? curUser.language : "uk",
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–∑—ã–∫ üôÉ"
          )
        );
      } else if (curUser.isInQuiz) {
        const res = await checkAnswer(
          curUser.questionNumber,
          text,
          curUser.category
        );
        await sendAnswer(curUser, res);
      } else if (curUser.isOutQuiz) {
        await endMenu(curUser);
      } else
        await bot.sendMessageDelay(
          curUser,
          await translate(
            curUser.language,
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω–∏–º)"
          )
        );
    } catch (e) {
      console.log(e);
      await getJSON(bot, ADMIN_ID);
    }
  });
  bot.on("polling_error", console.log);
  bot.on("webhook_error", (error) => {
    console.log(error.code);
  });

  bot.on("callback_query", async (msg) => {
    const curUser = await userCheck(msg.from);
    let callbackText = "";
    bot.answerCallbackQuery(msg.id, {
      text: callbackText,
      show_alert: true,
    });
    try {
      if (curUser.isLanguageChoosing) {
        if (msg.data === "uk" || msg.data === "ru") {
          await languageIsChanged(curUser, msg.data);
        }
      } else if (curUser.isNameWriting) {
        if (msg.data === "yes") {
          await nameApprove(curUser);
        } else if (msg.data === "change") {
          await addName(curUser, true);
        }
      } else if (
        !curUser.isInQuiz &&
        msg.data === `ok${curUser.questionNumber}`
      ) {
        await askQuestion(curUser);
      }
    } catch (e) {
      console.log(e);
      await getJSON(bot, ADMIN_ID);
    }
  });
}

async function startScreen(curUser) {
  if (!curUser.language) {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language ? curUser.language : "uk",
        "*–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç–∏—è*"
      )
    );
    await changeLanguage(curUser);
  } else
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ /restart")
    );
}

async function changeLanguage(curUser) {
  curUser.isLanguageChoosing = true;
  const opts = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: curUser.language === "ru" ? "–†—É—Å—Å–∫–∏–π" : "–†–æ—Åi–π—Å—å–∫–∞",
            callback_data: "ru",
          },
          {
            text: curUser.language === "ru" ? "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π" : "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            callback_data: "uk",
          },
        ],
      ],
    }),
  };
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language ? curUser.language : "uk",
      "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è"
    ),
    opts
  );
}

async function languageIsChanged(curUser, languageThatIsChosen) {
  await bot.sendMessageDelay(
    curUser,
    languageThatIsChosen === "ru"
      ? "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
      : "–ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É."
  );
  await bot.setMyCommands([
    {
      command: "/restart",
      description: await translate(languageThatIsChosen, "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
    },
    {
      command: "/info",
      description: await translate(languageThatIsChosen, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    },
    {
      command: "/language",
      description: await translate(languageThatIsChosen, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞"),
    },
  ]);

  curUser.isLanguageChoosing = false;

  if (!curUser.language) {
    curUser.language = languageThatIsChosen;
    await sendInfo(curUser);

    addName(curUser);
  }
  curUser.language = languageThatIsChosen;
}

async function addName(curUser, rewrite = false) {
  curUser.isNameWriting = true;
  if (rewrite) {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–•–æ—Ä–æ—à–æ, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–Ø —É–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—åüòäN–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
      )
    );
  }
}

async function sendInfo(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "*–ü–æ–ª–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä—Å–µ, –ø—Ä–∞–≤–∏–ª–∞—Ö –∏ –±–æ—Ç–µ*"
    )
  );
}

async function lookAtName(curUser, text) {
  let res = await checkName(text);
  if (res === "long") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º üôÇ"
      )
    );
  } else {
    const opts = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: await translate(curUser.language, "–î–∞"),
              callback_data: "yes",
            },
          ],
          [
            {
              text: await translate(curUser.language, "–ò–∑–º–µ–Ω–∏—Ç—å"),
              callback_data: "change",
            },
          ],
        ],
      }),
    };
    curUser.name = res;
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, `–¢–µ–±—è –∑–æ–≤—É—Ç ${res}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?`),
      opts
    );
  }
}

async function nameApprove(curUser) {
  curUser.isNameWriting = false;
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      `–°—É–ø–µ—Ä, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ${curUser.name}`
    )
  );
  await askForAge(curUser);
}

async function askForAge(curUser) {
  curUser.isAgeWriting = true;
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      `–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º üôÉN–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?`
    )
  );
}

async function lookAtAge(curUser, text) {
  let res = await checkAge(text);
  if (!res) {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏üôÇ"
      )
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, `–°–ø–∞—Å–∏–±–æ!`)
    );
    curUser.age = res;
    curUser.isAgeWriting = false;
    await checkCategory(curUser);
    await startQuiz(curUser);
  }
}

async function startQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "*–ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã*NN(–û—Ç–≤–µ—Ç—ã —Å–µ–π—á–∞—Å 1, 3, 2)"
    )
  );
  await askQuestion(curUser);
}

async function askQuestion(curUser) {
  if (curUser.questionNumber > 2) await endQuiz(curUser);
  else {
    curUser.isInQuiz = true;
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        await questionText(curUser.questionNumber, curUser.category)
      )
    );
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        await optionsText(curUser, curUser.category)
      ),
      {
        reply_markup: JSON.stringify({
          keyboard: [
            await optsOptions(curUser.questionNumber, curUser.category),
          ],
          resize_keyboard: true,
        }),
      }
    );
  }
}

async function sendAnswer(curUser, res) {
  if (res === "problem") {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–£–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
    );
  } else if (res === "incorrect") {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ N*–í–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É*"
      )
    );
    if (!curUser.isOutQuiz) {
      if (curUser.curPoints[curUser.curPoints.length - 1] > 0)
        curUser.curPoints[curUser.curPoints.length - 1]--;
    }
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ú–æ–ª–æ–¥–µ—Ü!"),
      {
        reply_markup: JSON.stringify({
          hide_keyboard: true,
        }),
      }
    );
    curUser.questionNumber++;
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É*"),
      {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              {
                text: await translate(curUser.language, "–ü–æ–Ω—è—Ç–Ω–æ"),
                callback_data: `ok${curUser.questionNumber}`,
              },
            ],
          ],
        }),
      }
    );
    curUser.isInQuiz = false;
  }
}

async function endQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(
      curUser.language,
      "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫–≤–∏–∑–∞!NN*–ü—Ä–æ—â–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç*"
    ),
    {
      reply_markup: JSON.stringify({
        hide_keyboard: true,
      }),
    }
  );
  if (!curUser.isOutQuiz) {
    curUser.points = curUser.curPoints.reduce((a, b) => +a + +b);
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${curUser.points}`)
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        `–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ)`
      )
    );
  }
  curUser.isInQuiz = false;
  curUser.isOutQuiz = true;
}

async function save() {
  setTimeout(async () => {
    await save();
    await saveUsers();
    setTimeout(async () => await setInfo(), 1000 * 60 * 1);
  }, 1000 * 60 * 5);
}

async function endMenu(curUser) {
  await bot.sendMessageDelay(
    curUser,
    await translate(curUser.language, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞!")
  );
}

async function timeout(curUser, ms) {
  return new Promise((resolve) =>
    setTimeout(() => {
      curUser.botIsTexting = false;
      resolve();
    }, ms)
  );
}

TelegramBot.prototype.sendMessageDelay = async function (curUser, text, opts) {
  curUser.botIsTexting = true;
  await this.sendChatAction(curUser.telegramId, "typing");
  await timeout(curUser, text.length * 50);
  await this.sendMessage(curUser.telegramId, text, opts);
};

async function restartQuiz(curUser) {
  if (!curUser.points)
    await bot.sendMessageDelay(
      curUser,
      await translate(
        curUser.language,
        "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–≤–∏–∑, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑"
      )
    );
  else {
    curUser.questionNumber = 0;
    await bot.sendMessageDelay(
      curUser,
      await translate(curUser.language, "–ö–≤–∏–∑ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ"),
      {
        reply_markup: JSON.stringify({
          hide_keyboard: true,
        }),
      }
    );
    await askQuestion(curUser);
  }
}

start();
