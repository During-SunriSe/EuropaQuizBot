import TelegramBot from "node-telegram-bot-api";
import {
  userCheck,
  checkName,
  checkAge,
  //  checkCategory,
  getJSON,
  saveUsers,
} from "./users/users.js";
import { translate } from "./translator.js";
import {
  explanationText,
  questionText,
  optionsText,
  optsOptions,
  checkAnswer,
  getComment,
  questionLength,
} from "./questions/questions.js";
import { setInfo } from "./users/sheetsInfo.js";
import {
  clearAdmin,
  clearAll,
  clearUser,
  saveUsersRedis,
} from "./redisConnect.js";
import dotenv from "dotenv";

dotenv.config();

const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: true,
});

const ADMIN_ID = parseInt(process.env.ADMIN_ID);

process.on("uncaughtException", async (error, source) => {
  console.log(error, source);
  await bot.sendDocument(ADMIN_ID, "./users/users.json");
  console.log("Uncaughtable");
});

bot.setMyCommands([
  { command: "/info", description: "–ü—Ä–∞–≤–∏–ª–∞" },
  { command: "/help", description: "–î–æ–ø–æ–º–æ–≥–∞" },
  { command: "/send", description: "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–∞–ª—é–Ω–æ–∫" },
]);

function start() {
  save();

  bot.on("message", async (msg) => {
    const text = msg.text;
    const curUser = await userCheck(msg.from);

    try {
      if (curUser.botIsTexting === true) return;

      if (curUser.isSending) {
        if (text?.toLowerCase() === "—Å–∫–∞—Å—É–≤–∞—Ç–∏") {
          await bot.sendMessageDelay(
            curUser,
            "–®–∫–æ–¥–∞, üòî –∞–ª–µ —Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –ø—ñ–∑–Ω—ñ—à–µ!"
          );
          curUser.isSending = false;
        } else if (msg.photo || msg.document) {
          await sendIllustration(curUser, msg);
        } else {
          await bot.sendMessageDelay(curUser, "–ß–µ–∫–∞—é –Ω–∞ —Ñ–∞–π–ª –∞–±–æ —Ñ–æ—Ç–æ üòå");
        }
        return;
      } else if (!text) {
        await bot.sendMessageDelay(curUser, "–ü—Ä–æ–±–∞—á, —è —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é");
        return;
      }

      if (text === "/getJSON" && curUser.telegramId === ADMIN_ID) {
        await getJSON(bot, ADMIN_ID);
        return;
      }

      if (text === "/save" && curUser.telegramId === ADMIN_ID) {
        await saveUsersRedis();
        return;
      }

      if (text === "/clear" && curUser.telegramId === ADMIN_ID) {
        clearAdmin();
        return;
      }

      if (text.includes("/sendNext") && curUser.telegramId === ADMIN_ID) {
        await askQuestion(await userCheck({ id: text.split(" ")[1] }));
        return;
      }

      if (text.includes("/clearUser") && curUser.telegramId === ADMIN_ID) {
        clearUser(text);
        return;
      }

      if (text.includes("/sendUser") && curUser.telegramId === ADMIN_ID) {
        let id = text.split(" ")[1];
        let curText = text.split(" ").slice(2).join(" ");
        if (!curText)
          bot.sendMessage(
            id,
            "–ü—Ä–∏–≤—ñ—Ç, —è –±–∞—á—É, —â–æ –≤ —Ç–µ–±–µ –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ú–µ–Ω—ñ –¥—É–∂–µ —à–∫–æ–¥–∞ üôÅ –Ø –≤–∂–µ —Å–ø–æ–≤—ñ—Å—Ç–∏–≤ —Å–≤–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞, –Ω–∞–ø–∏—à–∏ –π–æ–º—É, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–Ω —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂–µ!!\n\n@BohdanTut"
          );
        else bot.sendMessage(id, curText);
        return;
      }

      if (text === "/clearAll" && curUser.telegramId === ADMIN_ID) {
        clearAll();
        return;
      }

      if (text === "/start") {
        await startScreen(curUser);
      } else if (text === "/info") {
        await sendInfo(curUser);
      } else if (text === "/help") {
        await help(curUser);
      } else if (text === "/send") {
        await wantToSend(curUser);
      } else if (curUser.helpAsking) {
        if (text.toLowerCase() === "—Å–∫–∞—Å—É–≤–∞—Ç–∏") {
          cancelHelp(curUser);
        } else {
          sendHelp(curUser, text);
        }
      } else if (curUser.isAgeWriting) {
        await lookAtAge(curUser, text);
      } else if (curUser.isNameWriting) {
        await lookAtName(curUser, text);
      } else if (curUser.isBotNameWriting) {
        await lookAtName(curUser, text, true);
      } else if (curUser.isSending) {
        await lookAtName(curUser, text, true);
      } else if (curUser.isMediatorAnswerWriting) {
        await checkMediatorAnswer(curUser, text);
      } else if (curUser.whatIsForgotten) {
        await checkFirstAnswer(curUser, text);
      } else if (curUser.isGenderChoosing) {
        await bot.sendMessageDelay(curUser, "–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –±—É–¥—å –ª–∞—Å–∫–∞ üôÉ", {
          reply_markup: JSON.stringify({ hide_keyboard: true }),
        });
      } else if (curUser.isInQuiz) {
        const res = await checkAnswer(curUser.questionNumber, text);
        await sendAnswer(curUser, res);
      } else if (curUser.isOutQuiz) {
        await endMenu(curUser);
      } else if (!curUser.gender) {
        if (text.toLowerCase().includes("—Ç–∞–∫")) await chooseGender(curUser);
      } else
        await bot.sendMessageDelay(
          curUser,
          "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –æ–∑–Ω–∞–π–æ–º—Å—è –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –Ω–∏–º üòâ"
        );
    } catch (e) {
      console.log(e);
      await getJSON(bot, process.env.ADMIN_ID);
      if (curUser) {
        await bot.sendMessage(
          process.env.ADMIN_ID,
          "#–æ—à–∏–±–∫–∞\n\n–¢–µ–∫—Å—Ç —É " + curUser.telegramId
        );
      } else {
        await bot.sendMessage(process.env.ADMIN_ID, "#–æ—à–∏–±–∫–∞\n\n–¢–µ–∫—Å—Ç");
      }
    }
  });
  bot.on("polling_error", console.log);
  bot.on("webhook_error", (error) => {
    console.log(error.code);
  });

  bot.on("callback_query", async (msg) => {
    const curUser = await userCheck(msg.from);

    let callbackText = "";
    bot.answerCallbackQuery(msg.id, {
      text: callbackText,
      show_alert: true,
    });

    if (curUser.botIsTexting === true) return;

    if (msg.data !== "#") await editButtons(msg);

    try {
      if (msg.data === "help") {
        AsksForHelp(curUser);
      } else if (msg.data.includes("note")) {
        await giveNote(curUser, msg.data);
        await bot.sendMessageDelay(curUser, "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫!");
      } else if (curUser.isGenderChoosing) {
        if (msg.data === "man" || msg.data === "woman") {
          await genderIsChosen(curUser, msg.data);
        }
      } else if (curUser.isNameWriting) {
        if (msg.data === "yes") {
          await nameApprove(curUser);
        } else if (msg.data === "change") {
          await addName(curUser, true);
        }
      } else if (curUser.isBotNameWriting) {
        if (msg.data === "yes") {
          await botNameApprove(curUser);
        } else if (msg.data === "change") {
          await addBotName(curUser, true);
        }
      } else if (curUser.firstQuestionAsking) {
        if (msg.data === "yeah") {
          await nameStory2(curUser);
        } else if (msg.data === "yeah1") {
          await mediatorsKnow(curUser, true);
        } else if (msg.data === "no1") {
          await mediatorsKnow(curUser, false);
        } else if (msg.data === "yeah2") {
          await startQuizAnswer(curUser, true);
        } else if (msg.data === "no2") {
          await startQuizAnswer(curUser, false);
        }
      } else if (
        !curUser.isInQuiz &&
        msg.data === `ok${curUser.questionNumber}`
      ) {
        await askQuestion(curUser);
      } else if (
        !curUser.isInQuiz &&
        msg.data === `want${curUser.questionNumber}`
      ) {
        await showExplanation(curUser);
      }
    } catch (e) {
      console.log(e);
      await getJSON(bot, process.env.ADMIN_ID);
      if (curUser) {
        await bot.sendMessage(
          process.env.ADMIN_ID,
          "#–æ—à–∏–±–∫–∞\n\n–ö–Ω–æ–ø–∫–∏ —É " + curUser.telegramId
        );
      } else {
        await bot.sendMessage(process.env.ADMIN_ID, "#–æ—à–∏–±–∫–∞\n\n–ö–Ω–æ–ø–∫–∏");
      }
    }
  });
}

async function startScreen(curUser) {
  if (!curUser.started) {
    curUser.started = true;
    const opts = {
      parse_mode: "HTML",
      disable_web_page_preview: true,
      reply_markup: JSON.stringify({
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: "–¢–∞–∫!",
            },
          ],
        ],
      }),
    };
    await bot.sendMessage(
      curUser.telegramId,
      `–†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —É –≥—Ä—ñ-–∫–≤–µ—Å—Ç—ñ ¬´–ß–ê–†–Ü–í–ù–ò–ô –°–í–Ü–¢ –ú–ï–î–Ü–ê–¶–Ü–á¬ª!
      \n–ó–∞–ø—Ä–æ—à—É—î–º–æ —Ç–µ–±–µ –¥–æ—Ç–æ—Ä–∫–Ω—É—Ç–∏—Å—è –¥–æ —á–∞—Ä—ñ–≤–Ω–æ–≥–æ —Å–≤—ñ—Ç—É –º–µ–¥—ñ–∞—Ü—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ–¥—ñ–∞—Ç–æ—Ä–∞-–º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫–∞, —è–∫–∏–π –ø—Ä–∏–±—É–≤ –∑ –¥—Ä—É–∂–Ω—å–æ—ó –ø–ª–∞–Ω–µ—Ç–∏. üåç
      \n–í—ñ–Ω –±—É–¥–µ –¥–∞–≤–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º, –Ω–∞ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —î –¥–µ–∫—ñ–ª—å–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —ñ –ª–∏—à–µ –æ–¥–Ω–∞ –∑ –Ω–∏—Ö –±—É–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é. –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–¥—É—Ç—å –º–∞–≥—ñ—á–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –Ω–∞ –±–∞–ª–∏. ‚ú® 
      \n–¢—ñ–ª—å–∫–∏ –Ω–µ –∑–∞—Å–º—É—á—É–π—Å—è, —è–∫—â–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—ñ–¥–∫–æ—Ä–∏—Ç—å—Å—è —Ç–æ–±—ñ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É ‚Äì —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ –±–∞–ª—ñ–≤, –∞–ª–µ –¥—ñ–∑–Ω–∞—î—à—å—Å—è –Ω–æ–≤—É —Ç–∞ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ü—Ä–æ–±—É–π —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —á–∏—Ç–∞–π –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ –∑–Ω–∞—Ö–æ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫. üïµüïµ‚Äç‚ôÄÔ∏è
      \n–¢–∏ –º–æ–∂–µ—à –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –≥—Ä—É —É –∑—Ä—É—á–Ω–∏–π —á–∞—Å, —Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ—Ä–≤–∏ —Ç–∞ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –∑ —Ç–æ–≥–æ –º—ñ—Å—Ü—è, –¥–µ –∑—É–ø–∏–Ω–∏–≤—Å—è. –£—Å–µ —Ç–≤–æ—î —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –º–µ–¥—ñ–∞—Ç–æ—Ä–æ–º-–º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫–æ–º –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —Ç–∞ —Ç–∏ –∑–º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –π–æ–≥–æ —á–∞—Å –≤—ñ–¥ —á–∞—Å—É. 
      \n–©–æ–º—ñ—Å—è—Ü—è –≤–∏–∑–Ω–∞—á–∞—Ç–∏–º—É—Ç—å—Å—è 30 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫—ñ –ø–µ—Ä—à–∏–º–∏ –Ω–∞–±–µ—Ä—É—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤. 
      \n–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä—É —Ç–∞ –ø—Ä–∏–∑–∏ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ <a href='https://docs.google.com/document/d/1Kw3fMgjkdaYNg2-k4cYk6S6gjBu1RkfF3N1qGmQ0xHg/edit?usp=sharing'>—Ç—É—Ç</a>.
      \n–ö–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ "–¢–∞–∫!"üòâ 
      `,
      opts
    );
  } else await bot.sendMessageDelay(curUser, "–ö–≤–µ—Å—Ç —É–∂–µ –ø–æ—á–∞–≤—Å—è üòÅ");
}

async function chooseGender(curUser) {
  curUser.isGenderChoosing = true;
  await bot.sendPhoto(
    curUser.telegramId,
    "AgACAgIAAxkBAAIdw2Rvv-rNJta27n1SHVmLDOf9gd0iAAKJ0jEbyCGAS7Kn5ozGFc9wAQADAgADcwADLwQ",
    {
      reply_markup: JSON.stringify({
        hide_keyboard: true,
      }),
      caption: "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥—É–∂–µ —Ö–æ—á—É –∑ —Ç–æ–±–æ—é –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è üòÉ",
    }
  );
  const opts = {
    reply_markup: JSON.stringify({
      resize_keyboard: true,
      inline_keyboard: [
        [
          {
            text: "–ü—Ä–∏–≤—ñ—Ç, —è —Ö–ª–æ–ø—á–∏–∫!",
            callback_data: "man",
          },
        ],
        [
          {
            text: "–ü—Ä–∏–≤—ñ—Ç, —è –¥—ñ–≤—á–∏–Ω–∫–∞!",
            callback_data: "woman",
          },
        ],
      ],
    }),
  };
  await bot.sendMessageDelay(curUser, "–¢–∏ —Ö–ª–æ–ø—á–∏–∫ —á–∏ –¥—ñ–≤—á–∏–Ω–∫–∞?", opts);
}

async function genderIsChosen(curUser, GenderThatIsChosen) {
  curUser.gender = GenderThatIsChosen;
  curUser.isGenderChoosing = false;

  await addName(curUser);
}

async function addName(curUser, rewrite = false) {
  curUser.isNameWriting = true;
  if (rewrite) {
    await bot.sendMessageDelay(curUser, "–î–æ–±—Ä–µ, –Ω–∞–ø–∏—à–∏ —â–µ —Ä–∞–∑ üòå");
  } else {
    await bot.sendMessageDelay(curUser, "–°—É–ø–µ—Ä, –∞ —è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏? üôÉ");
  }
}

async function sendInfo(curUser) {
  await bot.sendMessageDelay(curUser, "–ù–∞ —Ç–µ–±–µ —á–µ–∫–∞—é—Ç—å —Ç–∞–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:");
  await bot.sendMessageDelay(
    curUser,
    "‚Ä¢	–í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –º–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–∑–∞ –∫–æ–∂–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –±–∞–ª–∏. –ù–∞ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —î –¥–µ–∫—ñ–ª—å–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º, –Ω–µ –≤—Å—ñ –∑ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ñ. –ß–∏–º –±—ñ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏, —Ç–∏–º –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤);"
  );
  await bot.sendMessageDelay(
    curUser,
    "‚Ä¢	–î–æ–ø–æ–º–æ–≥—Ç–∏ –∑–≥–∞–¥–∞—Ç–∏ –º–æ—î —ñ–º‚Äô—è (–∑–∞ —Ü–µ —Ç–∞–∫–æ–∂ –±—É–¥—É—Ç—å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –±–∞–ª–∏);"
  );
  await bot.sendMessageDelay(
    curUser,
    "‚Ä¢	–í–∏–∫–æ–Ω–∞—Ç–∏ —Ç–≤–æ—Ä—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –≥—Ä–∏ (—Ü–µ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—è —Ç–∞ –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–µ –≤–ø–ª–∏–≤–∞—Ç–∏–º–µ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–æ–±–æ—é –±–∞–ª—ñ–≤, –æ–¥–Ω–∞–∫ –Ω–∞–¥–∞—Å—Ç—å –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø—Ä–∏–∑);"
  );
  await bot.sendMessageDelay(
    curUser,
    "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞ –ø—Ä–∏–∑–∏ <a href='https://docs.google.com/document/d/1Kw3fMgjkdaYNg2-k4cYk6S6gjBu1RkfF3N1qGmQ0xHg/edit?usp=sharing'>—Ç—É—Ç</a> üßê",
    { parse_mode: "HTML" }
  );
}

async function lookAtName(curUser, text, forBot = false) {
  let res = await checkName(text);
  if (res === "long") {
    await bot.sendMessageDelay(
      curUser,
      "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ —ñ–º'—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º üôÇ"
    );
  } else {
    const opts = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ",
              callback_data: "yes",
            },
          ],
          [
            {
              text: "–ó–º—ñ–Ω–∏—Ç–∏",
              callback_data: "change",
            },
          ],
        ],
      }),
    };
    if (!forBot) {
      curUser.name = res;
      await bot.sendMessageDelay(
        curUser,
        `${res}, —Ç–∞–∫? –ü–µ—Ä–µ–≤—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —ñ–º'—è üòä`,
        opts
      );
    } else {
      curUser.botName = res;
      await bot.sendMessageDelay(
        curUser,
        `–Ø –º–µ–¥—ñ–∞—Ç–æ—Ä-–º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫ –Ω–∞ —ñ–º'—è ${res}, —Ç–∞–∫?üòä`,
        opts
      );
    }
  }
}

async function nameApprove(curUser) {
  curUser.isNameWriting = false;
  await bot.sendMessageDelay(
    curUser,
    `–°—É–ø–µ—Ä, –ø—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è, ${curUser.name}!`
  );
  await askForAge(curUser);
}

async function askForAge(curUser) {
  curUser.isAgeWriting = true;
  await bot.sendMessageDelay(curUser, `–ê —Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤? üôÉ`);
}

async function lookAtAge(curUser, text) {
  let res = await checkAge(text);
  if (!res) {
    await bot.sendMessageDelay(curUser, "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π –≤—ñ–∫ üôÇ");
  } else {
    await bot.sendMessageDelay(curUser, `ü§©`);
    curUser.age = res;
    curUser.isAgeWriting = false;
    // await checkCategory(curUser);
    await firstQuestion(curUser);
    //await startQuiz(curUser);
  }
}

async function firstQuestion(curUser) {
  curUser.firstQuestionAsking = true;
  curUser.whatIsForgotten = true;
  await bot.sendMessageDelay(
    curUser,
    "–û–π, –º–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —è —â–æ—Å—å –∑–∞–±—É–≤ –∑—Ä–æ–±–∏—Ç–∏... –Ø–∫ –≥–∞–¥–∞—î—à, —â–æ —Å–∞–º–µ?\n\n1. –ü—Ä–∏–≤—ñ—Ç–∞—Ç–∏—Å—è üëã\n2. –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è –Ω–∞ –∂–∏—Ç—Ç—è ü•≤\n3. –ù–∞–∑–≤–∞—Ç–∏ —Å–≤–æ—î —ñ–º'—è ü§î",
    {
      reply_markup: JSON.stringify({
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: "1",
            },
            { text: "2" },
            { text: "3" },
          ],
        ],
      }),
    }
  );
}

async function checkFirstAnswer(curUser, text) {
  if (text === "1") {
    await bot.sendMessageDelay(curUser, "–ù—ñ, –∑–¥–∞—î—Ç—å—Å—è –ø—Ä–∏–≤—ñ—Ç–∞–≤—Å—èüôÑ");
  } else if (text === "2") {
    await bot.sendMessageDelay(
      curUser,
      "–ê —Ç–∏ –∑ –≥—É–º–æ—Ä–æ–º üòÇ –º–µ–Ω—ñ —Ü–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è! –ù—ñ, —Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è –Ω–µ —Ö–æ—Ç—ñ–≤ üòå"
    );
  } else if (text === "3") {
    await bot.sendMessageDelay(
      curUser,
      "–¢–∞–∫, –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —è–∫ —è –º—ñ–≥ –ø—Ä–æ —Ü–µ –∑–∞–±—É—Ç–∏? üòÆ –î—è–∫—É—é, —â–æ –Ω–∞–≥–∞–¥–∞–≤!",
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );

    curUser.whatIsForgotten = false;
    await nameStory(curUser);
  } else {
    await bot.sendMessageDelay(curUser, "–í–∫–∞–∂–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
  }
}

async function nameStory(curUser) {
  await bot.sendMessageDelay(curUser, "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏‚Ä¶");
  await bot.sendMessageDelay(curUser, "–ú–µ–Ω–µ –∑–≤–∞–∞–∞–∞–∞–∞–∞—Ç–∏–∏–∏‚Ä¶ ");
  await bot.sendMessageDelay(curUser, "—É–ø—Å‚Ä¶ üòê");
  await bot.sendMessageDelay(curUser, "—è –Ω–µ –ø–∞–º‚Äô—è—Ç–∞—é‚Ä¶");
  await bot.sendMessageDelay(
    curUser,
    "–ó–¥–∞—î—Ç—å—Å—è, —Ç—Ä–∞–ø–∏–≤—Å—è —è–∫–∏–π—Å—å –≥–ª—é–∫ –ø—ñ–¥ —á–∞—Å –º–æ—î—ó —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—ó –¥–æ —Ç–µ–±–µ –∑ —á–∞—Ä—ñ–≤–Ω–æ—ó –ø–ª–∞–Ω–µ—Ç–∏. –ù—ñ—è–∫ –Ω–µ –º–æ–∂—É –ø—Ä–∏–≥–∞–¥–∞—Ç–∏ —Å–≤–æ—î —ñ–º‚Äô—è. –°–ø–æ–¥—ñ–≤–∞—é—Å—è, —â–æ —Ü–µ —Ç–∏–º—á–∞—Å–æ–≤–æ ü§î"
  );
  await bot.sendMessageDelay(
    curUser,
    "–ó–Ω–∞—î—à, —è–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ —ñ–Ω—à–æ—é –ª—é–¥–∏–Ω–æ—é, –≤–∞–∂–ª–∏–≤–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —Ç–∞ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –Ω–∞ —ñ–º‚Äô—è. –û–¥–∏–Ω –º—É–¥—Ä–µ—Ü—å üßôüèª —Å–∫–∞–∑–∞–≤, —â–æ —ñ–º‚Äô—è ‚Äî –Ω–∞–π—Å–æ–ª–æ–¥—à–∏–π —ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–π –¥–ª—è –ª—é–¥–∏–Ω–∏ –∑–≤—É–∫ –±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é "
  );
  await bot.sendMessageDelay(
    curUser,
    "–î–æ —Ä–µ—á—ñ, —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç! üòÉ –¢–≤–æ—î –ø—Ä–∞–≤–æ –Ω–∞ —ñ–º‚Äô—è —î —É —Ç–µ–±–µ –∑ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —Ç–∞ –Ω—ñ—Ö—Ç–æ –Ω–µ –º–æ–∂–µ –π–æ–≥–æ –ø–æ—Ä—É—à—É–≤–∞—Ç–∏"
  );
  await bot.sendMessageDelay(
    curUser,
    "–ë–∞—á—É, —Ç–∏ –≤–∂–µ –º–æ–∂–µ—à —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ, —Ç–∞–∫? üòâ",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–¢–∞–∫!",
              callback_data: "yeah",
            },
          ],
        ],
      }),
    }
  );
}

async function nameStory2(curUser) {
  await bot.sendMessageDelay(
    curUser,
    "–°—É–ø–µ—Ä, —Ç–æ–¥—ñ –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–æ–±—ñ - –¥–æ–ø–æ–º–æ–∂–∏ –º–µ–Ω—ñ –∑–≥–∞–¥–∞—Ç–∏ –º–æ—î —ñ–º'—è üòÖ",
    { reply_markup: JSON.stringify({ hide_keyboard: true }) }
  );
  await bot.sendMessageDelay(
    curUser,
    "–î–ª—è —Ü—å–æ–≥–æ —è —Ä–æ–∑–ø–æ–≤—ñ–º —Ç–æ–±—ñ –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–µ–±–µ"
  );
  await bot.sendMessageDelay(
    curUser,
    "–Ø –ø—Ä–∏–±—É–≤ –∑ —á—É–¥–æ–≤–æ—ó –ø–ª–∞–Ω–µ—Ç–∏, –¥–µ –≤—Å—ñ –º–µ—à–∫–∞–Ω—Ü—ñ —Ä–æ–∑–º–æ–≤–ª—è—é—Ç—å –æ–¥–Ω–µ –∑ –æ–¥–Ω–∏–º –≥–æ–ª–æ—Å–æ–º üó£, –∞ —á—É—é—Ç—å –≤—É—Ö–∞–º–∏ üëÇ"
  );
  await bot.sendMessageDelay(
    curUser,
    "–í—ñ–¥—á—É–≤–∞—é —Ç–≤–æ—î –∑–¥–∏–≤—É–≤–∞–Ω–Ω—è, –∞–¥–∂–µ –∑–¥–∞—î—Ç—å—Å—è, —â–æ —ñ –Ω–∞ –ó–µ–º–ª—ñ –ª—é–¥–∏ —Å–ø—ñ–ª–∫—É—é—Ç—å—Å—è —Ç–∞–∫ —Å–∞–º–æ üòÜ"
  );
  await bot.sendMessageDelay(curUser, "–û–¥–Ω–∞–∫! –ö–∞–∑–∞—Ç–∏ —ñ —á—É—Ç–∏ –º–æ–∂–Ω–∞ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É ");
  await bot.sendMessageDelay(
    curUser,
    "–°–ª–æ–≤–æ–º –º–æ–∂–Ω–∞ –æ–±—Ä–∞–∑–∏—Ç–∏ üòî, –∞ –Ω–∞ –æ–±—Ä–∞–∑—É –≤–∏–Ω–∏–∫–Ω–µ –∑–ª—ñ—Å—Ç—å üò†. –ü–æ—Ç—ñ–º —Ü–µ –º–æ–∂–µ –ø–µ—Ä–µ—Ä–æ—Å—Ç–∏ —É —Å–≤–∞—Ä–∫—É —á–∏ –Ω–∞–≤—ñ—Ç—å –±—ñ–π–∫—É. ü´£ –¢–æ–±—ñ –∑–Ω–∞–π–æ–º—ñ —Ç–∞–∫—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó?"
  );
  await bot.sendMessageDelay(
    curUser,
    "–ù–∞ –Ω–∞—à—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ –Ω—ñ —Å–≤–∞—Ä–æ–∫, –Ω—ñ –±—ñ–π–æ–∫, —Ç–æ–º—É —â–æ –≤—Å—ñ—Ö –∑–º–∞–ª–∫—É –Ω–∞–≤—á–∞—é—Ç—å, —â–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ —Ü–µ –Ω–µ –ø–æ–≥–∞–Ω–æ, –∞ —ñ–Ω–æ–¥—ñ –Ω–∞–≤—ñ—Ç—å –¥–æ–±—Ä–µ. –í–∞–∂–ª–∏–≤–æ: —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–Ω–∏–∫–∞—é—Ç—å, —Ç–æ –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ —ó—Ö —à–ª—è—Ö–æ–º –ø–µ—Ä–µ–º–æ–≤–∏–Ω ü§ù"
  );
  await bot.sendMessageDelay(
    curUser,
    "–í –Ω–∞—Å —î —Ç–∞–∫—ñ —á–∞—Ä—ñ–≤–Ω–∏–∫–∏, —è–∫—ñ –Ω–∞–∑–∏–≤–∞—é—Ç—å—Å—è ‚Äì –ú–ï–î–Ü–ê–¢–û–†–ò"
  );
  await bot.sendMessageDelay(
    curUser,
    "–°–∞–º–µ –≤–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —Å—Ç–æ—Ä–æ–Ω–∞–º –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å, —Å–ª–æ–≤–∞ —Ç–∞ –≤—É—Ö–∞ üòå –î–∞–ª—ñ —è —Ç–æ–±—ñ –ø–æ—è—Å–Ω—é –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ü—é –º–∞–≥—ñ—é üòÑ"
  );
  await bot.sendMessageDelay(
    curUser,
    "–Ø —Ç–µ–∂ —î –ú–µ–¥—ñ–∞—Ç–æ—Ä–æ–º –∑ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –≤–∞–∂–ª–∏–≤–æ—é –º—ñ—Å—ñ—î—é üòé: –º–∞–Ω–¥—Ä—É—é —Ä—ñ–∑–Ω–∏–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏ –π —Å–≤—ñ—Ç–∞–º–∏, –¥—ñ–ª—é—Å—è –¥–æ—Å–≤—ñ–¥–æ–º, –∑–Ω–∞–Ω–Ω—è–º–∏ –π –Ω–∞–≤–∏—á–∫–∞–º–∏ üòÅ"
  );
  await bot.sendMessageDelay(
    curUser,
    "–ú–æ—è –º—ñ—Å—ñ—è –∑–∞—Ä–∞–∑ ‚Äì –Ω–∞–≤—á–∏—Ç–∏ —Ç–µ–±–µ, —è–∫ —á—É—Ç–∏ —Ç–∞ –±—É—Ç–∏ –ø–æ—á—É—Ç–∏–º, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—á–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –Ω–µ –ø—Å—É–≤–∞—Ç–∏ —Å—Ç–æ—Å—É–Ω–∫–∏ –∑ –±–ª–∏–∑—å–∫–∏–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ üòå"
  );
  await bot.sendMessageDelay(curUser, "–¢–æ–±—ñ —â–æ—Å—å –≤—ñ–¥–æ–º–æ –ø—Ä–æ –ú–µ–¥—ñ–∞—Ç–æ—Ä—ñ–≤?", {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "–¢–∞–∫",
            callback_data: "yeah1",
          },
          {
            text: "–ù—ñ",
            callback_data: "no1",
          },
        ],
      ],
    }),
  });
}

async function mediatorsKnow(curUser, know) {
  if (know) {
    await bot.sendMessageDelay(
      curUser,
      "–û, —á—É–¥–æ–≤–æ ‚ò∫ –†–∞–¥—É—î —Ç–≤–æ—è –æ–±—ñ–∑–Ω–∞–Ω—ñ—Å—Ç—å, –∞–ª–µ –¥–æ–∑–≤–æ–ª—å —è —Ä–æ–∑–ø–æ–≤—ñ–º —Ç–æ–±—ñ —â–µ –±—ñ–ª—å—à–µ!"
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      "–ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –±–∞–≥–∞—Ç–æ —Ö—Ç–æ –Ω–µ –∑–Ω–∞—î üòâ –Ø —Ç—É—Ç –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏. –ù–∞ –Ω–∞—à—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ –±–∞–≥–∞—Ç–æ —Å—Ç–æ–ª—ñ—Ç—å —Ç–æ–º—É —Ç–µ–∂ –Ω—ñ—Ö—Ç–æ –ø—Ä–æ –Ω–∏—Ö –Ω–µ –∑–Ω–∞–≤. –û–¥–Ω–æ–≥–æ —Ä–∞–∑—É –¥–æ –Ω–∞—Å –ø—Ä–∏–ª–µ—Ç—ñ–≤ —Å—Ö–æ–∂–∏–π –Ω–∞ –º–µ–Ω–µ —á–∞—Ä—ñ–≤–Ω–∏–∫ —Ç–∞ –ø–æ–¥—ñ–ª–∏–≤—Å—è –¥–æ—Å–≤—ñ–¥–æ–º –π –∑–Ω–∞–Ω–Ω—è–º–∏"
    );
  }
  await bot.sendMessageDelay(
    curUser,
    "–Ø–∫ –¥—É–º–∞—î—à, –ú–µ–¥—ñ–∞—Ç–æ—Ä —Ü–µ \n\n1. –ü—Ä–∏–ª–∞–¥ –¥–ª—è –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ \n2. –û—Å–æ–±–∞, —è–∫–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –º–µ–¥—ñ–∞—Ü—ñ—é \n3. –û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏",
    {
      reply_markup: JSON.stringify({
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: "1",
            },
            {
              text: "2",
            },
            {
              text: "3",
            },
          ],
        ],
      }),
    }
  );

  curUser.isMediatorAnswerWriting = true;
}

async function checkMediatorAnswer(curUser, text) {
  if (text === "1") {
    await bot.sendMessageDelay(
      curUser,
      "–¢–∞–∫, —î —Ç–∞–∫–µ ü§î, —Ç–∞–∫–∏–π –º–µ–¥—ñ–∞—Ç–æ—Ä ‚Äì —Ü–µ –Ω–µ–≤–µ–ª–∏–∫–∏–π –ø–ª–æ—Å–∫–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ —Ç–∞ –¥–µ—è–∫–∏—Ö —ñ–Ω—à–∏—Ö —Å—Ç—Ä—É–Ω–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö üé∏. –ê–ª–µ –Ω–µ –ø—Ä–æ –Ω—å–æ–≥–æ –º–∏ –±—É–¥–µ–º–æ –∑ —Ç–æ–±–æ—é —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è. –û–±–µ—Ä–∏ —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üôÇ"
    );
  } else if (text === "2") {
    await bot.sendMessageDelay(
      curUser,
      "–¢–∞–∫, —ñ —Å–∞–º–µ –ø—Ä–æ –Ω–∏—Ö –º–∏ –±—É–¥–µ–º–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é! –•–æ—á–∞ —Ç–∏ –º–∞—î—à –∑–Ω–∞—Ç–∏, —â–æ –º–µ–¥—ñ–∞—Ç–æ—Ä–æ–º —Ç–∞–∫–æ–∂ —î –Ω–µ–≤–µ–ª–∏–∫–∏–π –ø–ª–æ—Å–∫–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ —Ç–∞ –¥–µ—è–∫–∏—Ö —ñ–Ω—à–∏—Ö —Å—Ç—Ä—É–Ω–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö üé∏",
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
    curUser.isMediatorAnswerWriting = false;
    await startQuizQuestion(curUser);
  } else if (text === "3") {
    await bot.sendMessageDelay(
      curUser,
      "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –Ñ –º–µ–¥—ñ–∞—Ç–æ—Ä, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≥—Ä–∏ –Ω–∞ –≥—ñ—Ç–∞—Ä—ñ, –∞–ª–µ –º–∏ –±—É–¥–µ–º–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ –ú–µ–¥—ñ–∞—Ç–æ—Ä—ñ–≤, —è–∫—ñ –ø—Ä–æ–≤–æ–¥—è—Ç—å –º–µ–¥—ñ–∞—Ü—ñ—é üòå",
      { reply_markup: JSON.stringify({ hide_keyboard: true }) }
    );
    curUser.isMediatorAnswerWriting = false;
    await startQuizQuestion(curUser);
  } else {
    await bot.sendMessageDelay(curUser, "–í–∫–∞–∂–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
  }
}

async function startQuizQuestion(curUser) {
  await bot.sendMessageDelay(
    curUser,
    "–ó–¥–∞—î—Ç—å—Å—è, —â–æ –º–∏ –º–æ–∂–µ–º–æ –ø–æ—á–∏–Ω–∞—Ç–∏ –∑–∞—Ä–æ–±–ª—è—Ç–∏ —Ç–æ–±—ñ –±–∞–ª–∏, —Å—Ç–∞—Ä—Ç—É—î–º–æ?",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–¢–∞–∫",
              callback_data: "yeah2",
            },
            {
              text: "–ù—ñ",
              callback_data: "no2",
            },
          ],
        ],
      }),
    }
  );
}

async function startQuizAnswer(curUser, agree) {
  curUser.firstQuestionAsking = false;
  if (agree) {
    await bot.sendMessageDelay(
      curUser,
      "–°—É–ø–µ—Ä! –ê–ª–µ –¥–æ–∑–≤–æ–ª—å —è —Ç–æ–±—ñ —Å–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–ø–æ–≤—ñ–º –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞ üòÅ –í–æ–Ω–∏ <a href='https://docs.google.com/document/d/1Kw3fMgjkdaYNg2-k4cYk6S6gjBu1RkfF3N1qGmQ0xHg/edit?usp=sharing'>—Ç—É—Ç</a>",
      { parse_mode: "HTML", disable_web_page_preview: true }
    );
  } else {
    await bot.sendMessageDelay(
      curUser,
      "–ó–≥–æ–¥–µ–Ω, —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞, –±–æ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–∂–ª–∏–≤–∞ —Ä—ñ—á üòÅ –í–æ–Ω–∏ <a href='https://docs.google.com/document/d/1Kw3fMgjkdaYNg2-k4cYk6S6gjBu1RkfF3N1qGmQ0xHg/edit?usp=sharing'>—Ç—É—Ç</a>",
      { parse_mode: "HTML", disable_web_page_preview: true }
    );
  }
  await sendInfo(curUser);
  await startQuiz(curUser);
}

async function startQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    "–Ø –∑–Ω–∞—é, —â–æ –Ω–∞ –≤–∞—à—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ —Ç–µ–∂ —ñ—Å–Ω—É—î –º–µ–¥—ñ–∞—Ü—ñ—è, –∞ —É —Ç–≤–æ—ó–π –∫—Ä–∞—ó–Ω—ñ –Ω–∞–≤—ñ—Ç—å —î –ó–∞–∫–æ–Ω –ø—Ä–æ –º–µ–¥—ñ–∞—Ü—ñ—é —Ç–∞ –ú–µ–¥—ñ–∞—Ç–æ—Ä—ñ–≤ üò≤"
  );
  await askQuestion(curUser);
}

async function showExplanation(curUser) {
  let explanation = await explanationText(curUser.questionNumber);
  for (let i = 0; i < explanation.length; i++) {
    if (i === explanation.length - 1) {
      await bot.sendMessageDelay(curUser, explanation[i], {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              {
                text: "–ó—Ä–æ–∑—É–º—ñ–ª–æ",
                callback_data: `ok${curUser.questionNumber}`,
              },
            ],
          ],
        }),
      });
    } else await bot.sendMessageDelay(curUser, explanation[i]);
  }
}

async function askQuestion(curUser) {
  if (curUser.questionNumber >= questionLength) await endQuiz(curUser);
  else {
    curUser.isInQuiz = true;
    const extraComments = await getComment(curUser.questionNumber - 1);
    if (extraComments.length) {
      for (let i = 0; i < extraComments.length; i++) {
        await bot.sendMessageDelay(curUser, extraComments[i]);
      }
    }
    await bot.sendMessageDelay(
      curUser,
      await questionText(curUser.questionNumber)
    );
    await bot.sendMessageDelay(curUser, await optionsText(curUser), {
      reply_markup: JSON.stringify({
        keyboard: [await optsOptions(curUser.questionNumber)],
        resize_keyboard: true,
      }),
    });
  }
}

async function sendAnswer(curUser, res) {
  const num = +res.split(" ")[1];
  res = res.split(" ")[0];
  if (res === "problem") {
    await bot.sendMessageDelay(
      curUser,
      "–í–∫–∞–∂–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (1, 2,... —Ç–æ—â–æ)"
    );
  } else if (res === "incorrect") {
    await bot.sendMessageDelay(
      curUser,
      await getComment(curUser.questionNumber, num)
    );
    if (!curUser.isOutQuiz) {
      if (curUser.curPoints[curUser.curPoints.length - 1] > 1)
        curUser.curPoints[curUser.curPoints.length - 1]--;
    }
  } else {
    await bot.sendMessageDelay(
      curUser,
      (
        await getComment(curUser.questionNumber, num)
      )[0],
      {
        reply_markup: JSON.stringify({
          hide_keyboard: true,
        }),
      }
    );
    const inlineArr = [
      [
        {
          text: "–ó—Ä–æ–∑—É–º—ñ–ª–æ",
          callback_data: `ok${curUser.questionNumber + 1}`,
        },
      ],
    ];
    if (curUser.questionNumber === 8) {
      inlineArr[0][0].text = "–ù–µ —Ü—ñ–∫–∞–≤–æ";
      inlineArr.unshift([
        {
          text: "–¶—ñ–∫–∞–≤–æ!",
          callback_data: `want${curUser.questionNumber + 1}`,
        },
      ]);
    }
    if (curUser.questionNumber === 4) {
      inlineArr[0][0].text = "–î—è–∫—É—é!";
    }
    if (curUser.questionNumber === 6) {
      inlineArr[0][0].text = "–î–∞–ª—ñ";
    }
    await bot.sendMessageDelay(
      curUser,
      (
        await getComment(curUser.questionNumber, num)
      )[1],
      {
        reply_markup: JSON.stringify({
          inline_keyboard: inlineArr,
        }),
      }
    );
    curUser.questionNumber++;
    curUser.isInQuiz = false;
  }
}

async function endQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    "–û—Ç–∂–µ, –º–∏ –∑ —Ç–æ–±–æ—é –¥—ñ–∑–Ω–∞–ª–∏—Å—å –ø—Ä–æ –º–µ–¥—ñ–∞—Ü—ñ—é —Ç–∞ –ú–µ–¥—ñ–∞—Ç–æ—Ä—ñ–≤. –ó–∞–ª–∏—à–∏–ª–æ—Å—è —Ä–æ–∑–∫—Ä–∏—Ç–∏ —Ç–æ–±—ñ –≥–æ–ª–æ–≤–Ω–∏–π —Å–µ–∫—Ä–µ—Ç ü§´ –ú–∞–≥—ñ—è –º–µ–¥—ñ–∞—Ü—ñ—ó –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–µ —Ä—ñ—à–µ–Ω–Ω—è, —è–∫–∏–º –≤–æ–Ω–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ. –¢–æ–¥—ñ –∫–æ–∂–µ–Ω –∑ –Ω–∏—Ö —î –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º ü•≥",
    {
      reply_markup: JSON.stringify({
        hide_keyboard: true,
      }),
    }
  );
  if (!curUser.isOutQuiz) {
    await afterQuiz(curUser);
  }
}

async function afterQuiz(curUser) {
  await bot.sendMessageDelay(
    curUser,
    `–ê –∑–∞—Ä–∞–∑ –ø—Ä–æ–ø–æ–Ω—É—é –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–æ–≥–æ —ñ–º–µ–Ω—ñ üôÉ`
  );
  await bot.sendMessageDelay(
    curUser,
    `–ü—ñ–¥—Å—É–º—É—î–º–æ - –≤–æ–Ω–æ –º–∞—î –±—É—Ç–∏ –≤–∏–≥–∞–¥–∞–Ω–∏–º —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –º–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:`
  );
  await bot.sendMessageDelay(
    curUser,
    `–Ø –≤–º—ñ—é —É–≤–∞–∂–Ω–æ —Å–ª—É—Ö–∞—Ç–∏, –Ω–∞—á–µ –º–∞—é —á–∞—Ä—ñ–≤–Ω—ñ –≤—É—Ö–∞ üëÇüëÇ`
  );
  await bot.sendMessageDelay(
    curUser,
    `–Ø –º–∞–π—Å—Ç–µ—Ä–Ω–æ —Ä–æ–∑–º–æ–≤–ª—è—é —ñ –ø—Ä–∏ —Ü—å–æ–º—É –≤–º—ñ—é —Ç—Ä–∏–º–∞—Ç–∏ —è–∑–∏–∫–∞ –∑–∞ –∑—É–±–∞–º–∏. –ù–µ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—é —ñ–Ω—à–∏–º –ø—Ä–æ —Ç–µ, —â–æ –¥—ñ–∑–Ω–∞–≤—Å—è –≤—ñ–¥ —Å—Ç–æ—Ä—ñ–Ω –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É ü§ê`
  );
  await bot.sendMessageDelay(
    curUser,
    `–Ø –≤–º—ñ–ª–æ –∫–µ—Ä—É—é –º–µ–¥—ñ–∞—Ü—ñ—î—é, –Ω–∞—á–µ –¥–∏—Ä–∏–≥–µ–Ω—Ç üòé (–æ—Å—å —ñ —Ç—É—Ç —î —á–∞—Ä—ñ–≤–Ω–∞ –ø–∞–ª–∏—á–∫–∞). –ê–ª–µ –Ω–µ –ø—ñ–¥–∫–∞–∑—É—é, —è–∫–µ —Ä—ñ—à–µ–Ω–Ω—è –∫—Ä–∞—â–µ, —Ç–∞ –Ω–µ –ø—Ä–∏–π–º–∞—é –π–æ–≥–æ`
  );
  await bot.sendMessageDelay(
    curUser,
    `–Ø –Ω–∞–º–∞–≥–∞—é—Å—è —Ä–æ–∑—É–º—ñ—Ç–∏ –ø–æ—á—É—Ç—Ç—è —Ç–∞ –ø–æ—Ç—Ä–µ–±–∏ –≤—Å—ñ—Ö —É –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ üôÇ`
  );
  await bot.sendMessageDelay(
    curUser,
    `–Ø –æ–¥–Ω–∞–∫–æ–≤–æ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ üòÉ —Å—Ç–∞–≤–ª—é—Å—è –¥–æ –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É, –Ω–µ –æ—Ü—ñ–Ω—é—é —Ç–∞ –Ω–µ –∑–∞—Å—É–¥–∂—É—é —ó—Ö`
  );
  await bot.sendMessageDelay(
    curUser,
    `–û—Ç–∂–µ, –º–∏ –ø—ñ–¥—Å—É–º—É–≤–∞–ª–∏! –°–∞–º–µ —á–∞—Å –ø–æ—á—É—Ç–∏, —è–∫–µ —ñ–º‚Äô—è —Ç–∏ –º–µ–Ω—ñ –ø—Ä–∏–¥—É–º–∞–≤`
  );

  await addBotName(curUser);
}

async function addBotName(curUser, rewrite = false) {
  curUser.isBotNameWriting = true;
  if (rewrite) {
    await bot.sendMessageDelay(curUser, "–î–æ–±—Ä–µ, –Ω–∞–ø–∏—à–∏ —â–µ —Ä–∞–∑ üòå");
  } else {
    await bot.sendMessageDelay(curUser, "–ù–∞–ø–∏—à–∏ —Ç–≤–æ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é üòÅ");
  }
}

async function botNameApprove(curUser) {
  curUser.isBotNameWriting = false;
  await bot.sendMessageDelay(
    curUser,
    "–í–∞—É ü§©, —Å—É–ø–µ—Ä! –î—è–∫—É—é —Ç–æ–±—ñ. –¢–µ–ø–µ—Ä —É –º–µ–Ω–µ –∑–Ω–æ–≤ —î —ñ–º‚Äô—è ü•≥ –Ø –±—É–≤ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ –∑ —Ü–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º —Ç–∏ —Ç–∞–∫–æ–∂ –≤–ø–æ—Ä–∞—î—à—Å—è. –î–∞–º —Ç–æ–±—ñ —Ü—ñ–ª–∏—Ö 16 –±–∞–ª—ñ–≤ –∑–∞ –Ω—å–æ–≥–æ!"
  );
  curUser.curPoints.push(16);
  curUser.points = curUser.curPoints.reduce((a, b) => +a + +b);

  const dateObject = new Date();
  let date = dateObject.toUTCString();
  curUser.date = date;

  await bot.sendMessageDelay(
    curUser,
    `–í—ñ—Ç–∞—é! ü•≥üéâ –ê —Ç–µ–ø–µ—Ä –ø–æ—Ä–∞—Ö—É—î–º–æ –Ω–∞–±—Ä–∞–Ω—ñ —Ç–æ–±–æ—é –±–∞–ª–∏. –Æ—Ö—É—É—É—É, —Ç–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - ${curUser.points} !üëèüëèüëè`
  );
  await bot.sendMessageDelay(
    curUser,
    `–í –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è –±—É–¥—É—Ç—å –≤–∏–∑–Ω–∞—á–µ–Ω—ñ 30 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫–∏–º –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –ø–µ—Ä—à–∏–º–∏. –ú–æ–∂–ª–∏–≤–æ —Ç–∏ –±—É–¥–µ—à –æ–¥–Ω–∏–º –∑ –Ω–∏—Ö. –ë–∞–∂–∞—é —É—Å–ø—ñ—Ö—É!`,
    { parse_mode: "HTML", disable_web_page_preview: true }
  );
  await bot.sendMessageDelay(
    curUser,
    "–õ–µ–¥—å –Ω–µ –∑–∞–±—É–≤ üòß –£ –º–µ–Ω–µ –¥–ª—è —Ç–µ–±–µ —â–µ –æ–¥–Ω–µ —Ç–≤–æ—Ä—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è!"
  );
  await bot.sendMessageDelay(
    curUser,
    "–ü—Ä–æ–ø–æ–Ω—É—é —Ç–æ–±—ñ —Å—Ç–∞—Ç–∏ —á–∞—Ä—ñ–≤–Ω–∏–∫–æ–º —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ—é –∑–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å ü™Ñ –¢–∏ –≤–∂–µ –±–∞–≥–∞—Ç–æ –∑–Ω–∞—î—à –ø—Ä–æ –º–µ–Ω–µ —ñ –∑–º–æ–∂–µ—à –¥–æ–ø–æ–º–æ–≥—Ç–∏ –º–µ–Ω—ñ –æ–Ω–æ–≤–∏—Ç–∏—Å—è"
  );
  await bot.sendMessageDelay(
    curUser,
    "–Ø –±—É–¥—É —Ä–∞–¥–∏–π –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–≥–∞—Ç–æ –º–∞–ª—é–Ω–∫—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –º–µ–Ω—ñ –ø—Ä–æ –º–∞–Ω–¥—Ä–∏ —Ç–∞ –Ω–∞—à—ñ –∑ —Ç–æ–±–æ—é –ø—Ä–∏–≥–æ–¥–∏ ‚ò∫ –Ø–∫—â–æ —Ç–∏ –≤—ñ–¥—á—É–≤–∞—î—à –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è, —Ç–æ –º–æ–∂–µ—à –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏ —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ —Ç–µ–º–∏ –∫–≤–µ—Å—Ç—É: –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–π –º–æ–Ω—Å—Ç—Ä, –µ–º–æ—Ü—ñ—ó, –º–µ–¥—ñ–∞—Ü—ñ—è —á–∏ —â–æ—Å—å —ñ–Ω—à–µ, —â–æ —Ç–æ–±—ñ –±—É–¥–µ –ø—Ä–∏—î–º–Ω–æ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏."
  );

  await bot.sendMessageDelay(
    curUser,
    "–¢–∏ –º–æ–∂–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–¥–∏–Ω —á–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –º–∞–ª—é–Ω–∫—ñ–≤ –¥–æ 1 –≤–µ—Ä–µ—Å–Ω—è 2023 "
  );
  await bot.sendMessageDelay(curUser, "–î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ /send");
  await bot.sendMessageDelay(
    curUser,
    "–ê–≤—Ç–æ—Ä–∏ –∫—Ä–∞—â–∏—Ö –º–∞–ª—é–Ω–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø—Ä–∏–∑–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø—Ä–∞–≤–∏–ª üòâ"
  );
  await bot.sendMessageDelay(
    curUser,
    "–ü—ñ–¥—Å—É–º–∫–∏ —Ü—å–æ–≥–æ —Ç–≤–æ—Ä—á–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å—É –±—É–¥—É—Ç—å –ø—ñ–¥–±–∏—Ç—ñ 15.09.2023 —Ä–æ–∫—É"
  );
  await bot.sendMessageDelay(
    curUser,
    curUser.name +
      ", —Ç–∏ –º–æ–ª–æ–¥–µ—Ü—å! –©–µ —Ä–∞–∑ –¥—è–∫—É—é —Ç–æ–±—ñ –∑–∞ —ñ–º‚Äô—è —Ç–∞ –∑–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω—É –∫–æ–º–ø–∞–Ω—ñ—é. –ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ —Ä–∞–¥–∏–π –Ω–∞—à–æ–º—É –∑–Ω–∞–π–æ–º—Å—Ç–≤—É. –ú–µ–Ω—ñ –≤–∂–µ —á–∞—Å –≤–∏—Ä—É—à–∞—Ç–∏ –¥–∞–ª—ñ - –Ω–∞ —ñ–Ω—à—É –ø–ª–∞–Ω–µ—Ç—É ü§ó"
  );

  curUser.isInQuiz = false;
  curUser.isOutQuiz = true;

  await bot.sendMessageDelay(
    curUser,
    "–Ø–∫—â–æ –≤ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∏ –±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —à–ª—è—Ö–æ–º –º–µ–¥—ñ–∞—Ü—ñ—ó - –Ω–∞–ø–∏—à–∏ –º–æ—ó–º –ó–µ–º–Ω–∏–º –¥—Ä—É–∑—è–º –≤ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É –∞–∫–∞–¥–µ–º—ñ—é –º–µ–¥—ñ–∞—Ü—ñ—ó (–£–ê–ú). ‚ú®‚ú®‚ú® –í–æ–Ω–∏ –≤–æ–ª–æ–¥—ñ—é—Ç—å –º–∞–≥—ñ—î—é –º–µ–¥—ñ–∞—Ü—ñ—ó —Ç–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å. –£–ê–ú —Ç–∞–∫–æ–∂ –º–∞—î —Å–∞–π—Ç –∑ –∫—É–ø–æ—é –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó üôÉ",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç–∏ –¥–æ –£–ê–ú",
              url: "tg://user?id=" + process.env.ADMIN_SECOND_ID,
            },
          ],
          [
            {
              text: "–í—ñ–¥–≤—ñ–¥–∞—Ç–∏ —Å–∞–π—Ç –£–ê–ú",
              url: "https://mediation.ua",
            },
          ],
        ],
      }),
    }
  );

  await timeout(curUser, 2000);
  await bot.sendPhoto(
    curUser.telegramId,
    "AgACAgIAAxkBAAI0O2R5gHTWWSypbVy85Ktq-jpBnSeoAALvzDEbE__JS_y8JciTQ2vVAQADAgADcwADLwQ",
    {
      caption:
        "–î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π! ü§ó‚ú® \n–¢–≤—ñ–π –º–µ–¥—ñ–∞—Ç–æ—Ä-–º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫ " +
        curUser.botName +
        " üíôüíõ",
    }
  );

  const opts = {
    reply_markup: JSON.stringify({
      resize_keyboard: true,
      inline_keyboard: [
        [
          {
            text: "‚òπ",
            callback_data: "note1",
          },
          {
            text: "üôÅ",
            callback_data: "note2",
          },
          {
            text: "üòê",
            callback_data: "note3",
          },
          {
            text: "üôÇ",
            callback_data: "note4",
          },
          {
            text: "üòÄ",
            callback_data: "note5",
          },
        ],
      ],
    }),
  };
  await bot.sendMessageDelay(curUser, "–ß–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è —Ç–æ–±—ñ –∫–≤–µ—Å—Ç?", opts);
}

async function help(curUser) {
  const opts = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            callback_data: "help",
          },
        ],
      ],
    }),
  };
  await bot.sendMessageDelay(
    curUser,
    "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —è–∫—ñ—Å—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–Ω—è–º –∫–≤–µ—Å—Ç—É, —Ç–∏ –º–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂–µ!",
    opts
  );
}

async function AsksForHelp(curUser) {
  curUser.helpAsking = true;
  await bot.sendMessageDelay(
    curUser,
    '–ß–µ–∫–∞—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"'
  );
}

async function cancelHelp(curUser) {
  curUser.helpAsking = false;
  await bot.sendMessageDelay(
    curUser,
    "–î–æ–±—Ä–µ, —Å–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è, —â–æ –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏—Ä—ñ—à–∏–ª–∏—Å—è üòå"
  );
}

async function sendHelp(curUser, text) {
  if (curUser.username) {
    bot.sendMessage(
      process.env.ADMIN_ID,
      `#–ø–æ–º–æ—â—å\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${curUser.username} –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n ${text}`
    );
    bot.sendMessage(
      process.env.ADMIN_SECOND_ID,
      `#–ø–æ–º–æ—â—å\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${curUser.username} –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n ${text}`
    );
  } else {
    bot.sendMessage(
      process.env.ADMIN_ID,
      `#–ø–æ–º–æ—â—å\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${curUser.telegramId} –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n ${text}`
    );
    bot.sendMessage(
      process.env.ADMIN_SECOND_ID,
      `#–ø–æ–º–æ—â—å\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${curUser.telegramId} –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n ${text}`
    );
  }
  await bot.sendMessageDelay(
    curUser,
    "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è, —â–æ –∑–º–æ–∂–µ–º–æ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏! üòâ"
  );

  curUser.helpAsking = false;
}

async function save() {
  setTimeout(async () => {
    await save();
    await saveUsers();
    setTimeout(async () => await setInfo(), 1000 * 60 * 2);
  }, 1000 * 60 * 3);
}

async function endMenu(curUser) {
  await bot.sendMessageDelay(curUser, "–î—è–∫—É—é –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—É!");
}

async function giveNote(curUser, note) {
  if (note.includes("1")) curUser.note = "–ø–ª–æ—Ö–æ";
  else if (note.includes("2")) curUser.note = "–Ω–µ –æ—á–µ–Ω—å";
  else if (note.includes("3")) curUser.note = "—Å—Ä–µ–¥–Ω–µ";
  else if (note.includes("4")) curUser.note = "—Ö–æ—Ä–æ—à–æ";
  else curUser.note = "–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ";
}

async function wantToSend(curUser) {
  if (!curUser.isOutQuiz) {
    await bot.sendMessageDelay(curUser, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–∫—ñ–Ω—á–∏ –∫–≤–µ—Å—Ç");
  } else {
    await bot.sendMessageDelay(
      curUser,
      '–Ø –¥—É–∂–µ —Ä–∞–¥–∏–π, —â–æ —Ç–∏ —â–æ—Å—å –Ω–∞–º–∞–ª—é–≤–∞–≤! üòä –í—ñ–¥–ø—Ä–∞–≤–ª—è–π\n\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ø–∏—à–∏ "—Å–∫–∞—Å—É–≤–∞—Ç–∏"'
    );
    curUser.isSending = true;
  }
}

async function sendIllustration(curUser, msg) {
  if (msg.photo) {
    console.log(msg.photo);
    await bot.sendPhoto(process.env.ADMIN_ID, msg.photo[0].file_id, {
      caption: `#–ú–∞–ª—é–Ω–æ–∫\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${
        curUser.username ? `@${curUser.username}` : curUser.telegramId
      }`,
    });
    await bot.sendPhoto(process.env.ADMIN_SECOND_ID, msg.photo[0].file_id, {
      caption: `#–ú–∞–ª—é–Ω–æ–∫\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${
        curUser.username ? `@${curUser.username}` : curUser.telegramId
      }`,
    });
  } else {
    await bot.sendDocument(process.env.ADMIN_ID, msg.document.file_id, {
      caption: `#–ú–∞–ª—é–Ω–æ–∫\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${
        curUser.username ? `@${curUser.username}` : curUser.telegramId
      }`,
    });
    await bot.sendDocument(process.env.ADMIN_SECOND_ID, msg.document.file_id, {
      caption: `#–ú–∞–ª—é–Ω–æ–∫\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${
        curUser.username ? `@${curUser.username}` : curUser.telegramId
      }`,
    });
  }
  await bot.sendMessageDelay(curUser, "–í–∞–∞–∞–∞—É, —Ü–µ —Ç–∞–∫ –≥–∞—Ä–Ω–æ, –¥—è–∫—É—é!!!ü•∫");
  curUser.isSending = false;
}

async function editButtons(msg) {
  const buttons = msg.message.reply_markup.inline_keyboard;
  for (let i = 0; i < buttons.length; i++) {
    for (let j = 0; j < buttons[i].length; j++) {
      if (buttons[i][j].callback_data === msg.data) buttons[i][j].text += " ‚úÖ";
      buttons[i][j].callback_data = "#";
    }
  }
  bot.editMessageReplyMarkup(
    {
      inline_keyboard: buttons,
    },
    {
      chat_id: msg.from.id,
      message_id: msg.message.message_id,
    }
  );
}

async function timeout(curUser, ms) {
  return new Promise((resolve) =>
    setTimeout(() => {
      curUser.botIsTexting = false;
      resolve();
    }, ms)
  );
}

TelegramBot.prototype.sendMessageDelay = async function (curUser, text, opts) {
  curUser.botIsTexting = true;
  await this.sendChatAction(curUser.telegramId, "typing");
  await timeout(curUser, text.length * 50 > 5000 ? 5000 : text.length * 50);
  await this.sendMessage(curUser.telegramId, text, opts);
};

// async function restartQuiz(curUser) {
//   if (!curUser.points)
//     await bot.sendMessageDelay(
//       curUser,
//       "–©–æ–± –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–≤—ñ–∑, –π–æ–≥–æ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–∞–∑"
//     );
//   else {
//     curUser.questionNumber = 0;
//     curUser.isInQuiz = true;
//     await bot.sendMessageDelay(curUser, "–ö–≤–∏–∑ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –∑–Ω–æ–≤—É", {
//       reply_markup: JSON.stringify({
//         hide_keyboard: true,
//       }),
//     });
//     await askQuestion(curUser);
//   }
// }

start();
